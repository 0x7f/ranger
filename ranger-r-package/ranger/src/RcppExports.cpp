// This file was generated by attributes::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>
using namespace Rcpp;

// rangerCpp
Rcpp::List rangerCpp(uint treetype, std::string dependent_variable_name, Rcpp::NumericMatrix input_data, std::vector<std::string> variable_names, uint mtry, uint num_trees, bool verbose, uint seed, uint num_threads, bool write_forest, uint importance_mode_r, uint min_node_size, std::vector<double>& split_select_weights, bool use_split_select_weights, std::vector<std::string>& always_split_variable_names, bool use_always_split_variable_names, std::string status_variable_name, bool prediction_mode, Rcpp::List loaded_forest, Rcpp::RawMatrix sparse_data, bool sample_with_replacement, bool probability, std::vector<std::string>& unordered_variable_names, bool use_unordered_variable_names, bool save_memory, uint splitrule_r);
extern "C" SEXP ranger_rangerCpp(SEXP treetypeSEXP, SEXP dependent_variable_nameSEXP, SEXP input_dataSEXP, SEXP variable_namesSEXP, SEXP mtrySEXP, SEXP num_treesSEXP, SEXP verboseSEXP, SEXP seedSEXP, SEXP num_threadsSEXP, SEXP write_forestSEXP, SEXP importance_mode_rSEXP, SEXP min_node_sizeSEXP, SEXP split_select_weightsSEXP, SEXP use_split_select_weightsSEXP, SEXP always_split_variable_namesSEXP, SEXP use_always_split_variable_namesSEXP, SEXP status_variable_nameSEXP, SEXP prediction_modeSEXP, SEXP loaded_forestSEXP, SEXP sparse_dataSEXP, SEXP sample_with_replacementSEXP, SEXP probabilitySEXP, SEXP unordered_variable_namesSEXP, SEXP use_unordered_variable_namesSEXP, SEXP save_memorySEXP, SEXP splitrule_rSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        InputParameter< uint > treetype( treetypeSEXP );
        InputParameter< std::string > dependent_variable_name( dependent_variable_nameSEXP );
        InputParameter< Rcpp::NumericMatrix > input_data( input_dataSEXP );
        InputParameter< std::vector<std::string> > variable_names( variable_namesSEXP );
        InputParameter< uint > mtry( mtrySEXP );
        InputParameter< uint > num_trees( num_treesSEXP );
        InputParameter< bool > verbose( verboseSEXP );
        InputParameter< uint > seed( seedSEXP );
        InputParameter< uint > num_threads( num_threadsSEXP );
        InputParameter< bool > write_forest( write_forestSEXP );
        InputParameter< uint > importance_mode_r( importance_mode_rSEXP );
        InputParameter< uint > min_node_size( min_node_sizeSEXP );
        InputParameter< std::vector<double>& > split_select_weights( split_select_weightsSEXP );
        InputParameter< bool > use_split_select_weights( use_split_select_weightsSEXP );
        InputParameter< std::vector<std::string>& > always_split_variable_names( always_split_variable_namesSEXP );
        InputParameter< bool > use_always_split_variable_names( use_always_split_variable_namesSEXP );
        InputParameter< std::string > status_variable_name( status_variable_nameSEXP );
        InputParameter< bool > prediction_mode( prediction_modeSEXP );
        InputParameter< Rcpp::List > loaded_forest( loaded_forestSEXP );
        InputParameter< Rcpp::RawMatrix > sparse_data( sparse_dataSEXP );
        InputParameter< bool > sample_with_replacement( sample_with_replacementSEXP );
        InputParameter< bool > probability( probabilitySEXP );
        InputParameter< std::vector<std::string>& > unordered_variable_names( unordered_variable_namesSEXP );
        InputParameter< bool > use_unordered_variable_names( use_unordered_variable_namesSEXP );
        InputParameter< bool > save_memory( save_memorySEXP );
        InputParameter< uint > splitrule_r( splitrule_rSEXP );
        Rcpp::List __result = rangerCpp(treetype, dependent_variable_name, input_data, variable_names, mtry, num_trees, verbose, seed, num_threads, write_forest, importance_mode_r, min_node_size, split_select_weights, use_split_select_weights, always_split_variable_names, use_always_split_variable_names, status_variable_name, prediction_mode, loaded_forest, sparse_data, sample_with_replacement, probability, unordered_variable_names, use_unordered_variable_names, save_memory, splitrule_r);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
